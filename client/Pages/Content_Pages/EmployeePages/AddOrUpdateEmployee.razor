@implements IDisposable
@if(allState.ShowEmployee)
{
    if(ShowAddOrUpdateEmployee)
    {
        <div class="container">
            <div class="row mt-4">
                <div class="col-lg-1 text-center"><i class="bi bi-x-lg fs-3 fs-bold text-bg-danger " style="cursor:pointer" @onclick="Closeform"></i></div>
                <div class="col-lg-3 text-center"><h2>@Title Employee</h2></div>
            </div>
            <div class="row">
                <div class="col-lg-12 mt-3 mb-5 d-flex justify-content-center">
               
                    <div class="hstack">
                        @if(FirstLayer)
                        {
                            <div class="@FloatingNumber1 text-center">1</div>
                            <div class="@Floatingdiv1 format-border"></div>
                            <div class="@FloatingNumber2 text-center">2</div>
                            <div class="@Floatingdiv2 format-border"></div>
                            
                        }
                        @if(SecondLayer)
                        {
                            <div class="@FloatingNumber1 text-center">1</div>
                            <div class="@Floatingdiv1 format-border"></div>
                            <div class="@FloatingNumber1 text-center">2</div>
                            <div class="@Floatingdiv1 format-border"></div>
                            
                        }
                        
                    </div>
                </div>
               @*Emploteee form/first/ second layers *@
               <div class="col-lg-12 ">
                   <div class="container-fluid">
                       @if(FirstLayer)
                        {
                            <EditForm Enhance Model="EmployeeGroup1" OnValidSubmit="Form1">
                                <DataAnnotationsValidator/>
                                <div class="row">
                                    <div class="col-lg-1"></div>
                                    <div class="col-lg-3">
                                        <div class="car-title mb-5 fs-bold" style="font-family:Tahoma">Personal Information</div>
                                        <div class="card-body">
                                            <div class="form-group">
                                                <label class="form-label">Fullname</label>
                                                <InputText @bind-Value="EmployeeGroup1.Name" class="form-Control"/>
                                                <ValidationMessage For="()=>EmployeeGroup1.Name"class="text-danger"/>
                                                    
                                            </div>
                                            <div class="form-group mt-2">
                                                <label class="form-label">TelephoneNumber</label>
                                                <InputText @bind-Value="EmployeeGroup1.TelephoneNumber" class="form-Control" />
                                                <ValidationMessage For="()=>EmployeeGroup1.TelephoneNumber" class="text-danger" />
                                                    
                                            </div>
                                            <div class="form-group mt-2">
                                                <label class="form-label">Address</label>
                                                <InputText @bind-Value="EmployeeGroup1.Address" class="form-Control" />
                                                <ValidationMessage For="()=>EmployeeGroup1.Address" class="text-danger" />

                                            </div>
                                            <div class="form-control mt-2">
                                                @if (!string.IsNullOrEmpty(EmployeeGroup1.Photo))
                                                {
                                                    <img src="@EmployeeGroup1.Photo" alt="Preview" style="max-width: 200px; max-height:200px" />
                                                }
                                                else
                                                {
                                                    <p>No image selected</p>
                                                }
                                                @*<img src=@EmployeeGroup1.Photo alt="Preview" style="max-width: 200px; max-height:200px" />*@
                                            </div>
                                        </div>
                                     </div>
                                     <div class="col-lg-2"></div>
                                     <div class="col-lg-2">
                                            <div class="car-title mb-5 fs-bold" style="font-family:Tahoma">Other Information</div>
                                            <div class="card-body">
                                                <div class="form-group ">
                                                    <label class="form-label">CivilId</label>
                                                    <InputText @bind-Value="EmployeeGroup1.CivilId" class="form-Control" />
                                                    <ValidationMessage For="()=>EmployeeGroup1.CivilId" class="text-danger" />

                                                </div>
                                            <div class="form-group mt-2">
                                                    <label class="form-label">File Number</label>
                                                    <InputText @bind-Value="EmployeeGroup1.FileNumber" class="form-Control" />
                                                    <ValidationMessage For="()=>EmployeeGroup1.FileNumber" class="text-danger" />

                                                </div>
                                            <div class="form-group mt-3">
                                                    <label class="form-label @(ImageUploadMessage == ""?"":"text-danger")">Photo   @(ImageUploadMessage==""?"Upload Image":ImageUploadMessage)  </label>
                                                    <InputFile class="form-control" OnChange="UploadImage"></InputFile>
                                                    <ValidationMessage For="()=>EmployeeGroup1.Photo" class="text-danger" />

                                                </div>
                                                <div class="form-group mt-5">
                                                <button class="btn btn-primary float-end mt-4 nb-5" type="submit" >
                                                        <i class="bi bi-arrow-right"></i>
                                                        Next
                                                          
                                                    </button>
                                                </div>
                                            </div>
                                    </div>
                                    <div class="col-lg-3"></div>
                                </div>
                                <div class="row"></div>
                                <div class="row"></div>

                            </EditForm>
                        }
                        @if(SecondLayer)
                        {
                            <EditForm Enhance Model="EmployeeGroup2" OnValidSubmit="Form2">
                                <DataAnnotationsValidator />
                                <div class="row">
                                    @*<div clas="col-lg-2"></div>*@
                                    <div class="col-lg-6">
                                        <div class="car-title mb-5 fs-bold" style="font-family:Tahoma;font-size:larger">Job Information</div>
                                        <div class="card-body ">
                                            <div class="form-group col-lg-2">
                                                <label class="form-label">Job Name</label>
                                                <InputText @bind-Value="EmployeeGroup2.JobName" class="form-Control" />
                                                <ValidationMessage For="()=>EmployeeGroup2.JobName" class="text-danger" />

                                            </div>
                                            <div class="form-group mt-3">
                                                @{
                                                    string generalDepartment = GeneralDepartment.Equals("") ? "Select General Ddepartment" : GeneralDepartment;
                                                }
                                                <label class="form-label">Select General Department</label>

                                                <SfDropDownList TValue="string" TItem="GeneralDepartment"  Placeholder="@generalDepartment" DataSource="GeneralDepartments">
                                                    <DropDownListFieldSettings Value="id" Text="name"></DropDownListFieldSettings>
                                                    <DropDownListEvents TValue="string" TItem="GeneralDepartment" ValueChange="OnGeneralDepartmentValueChange"></DropDownListEvents>
                                                </SfDropDownList>
                                               
                                            </div>
                                            <div class="form-group mt-3">
                                                @{
                                                    string department = Department.Equals("") ? "Select Department" : Department;
                                                }
                                                <label class="form-label">Select Department</label>
                                                <SfDropDownList TValue="string" TItem="Department" Placeholder="@department" DataSource="Departments">
                                                    <DropDownListFieldSettings Value="id" Text="name"></DropDownListFieldSettings>
                                                    <DropDownListEvents TValue="string" TItem="Department" ValueChange="OnDepartmentValueChange"></DropDownListEvents>
                                                </SfDropDownList>
                                             </div>
                                            <div class="form-group mt-3">
                                                <label class="form-label">Select Branch</label>
                                                @{
                                                    string branch = Branch.Equals("") ? "Select Branch" : Branch;
                                                }  
                                                <SfDropDownList TValue="string" TItem="Branch" Placeholder="@branch" DataSource="Branches">
                                                    <DropDownListFieldSettings Value="id" Text="name"></DropDownListFieldSettings>
                                                    <DropDownListEvents TValue="string" TItem="Branch" ValueChange="OnBranchValueChange"></DropDownListEvents>
                                                </SfDropDownList>
                                                <ValidationMessage For="()=>EmployeeGroup2.BranchId" class="text-danger"/>
                                            </div>
                                            <div class="form-group mt-4 nb-5">
                                                <button class="btn btn-primary float-start" type="button" @onclick="PrevClicked">
                                                    <i class="bi bi-arrow-left"></i>
                                                    Prev
                                                </button>
                                            </div>

                                        </div>
                                    </div>
                                    <div class="col-lg-6 ">
                                        <div class="car-title mb-5 fs-bold" style="font-family:Tahoma;font-size:larger">Location Information</div>
                                        <div class="card-body">
                                            <div class="form-group ">
                                                <label class="form-label">Select Country</label>
                                                @{
                                                    string country = Country.Equals("") ? "Select Country" : Country;
                                                }

                                                @*   <label class="form-label">@(CountryName == "" ? "Select Country" : $"selected Country :{CountryName}")</label>*@
                                                <SfDropDownList TValue="string" TItem="Country" Placeholder="@country" DataSource="Countries">
                                                    <DropDownListFieldSettings Value="id" Text="name"></DropDownListFieldSettings>
                                                    <DropDownListEvents TValue="string" TItem="Country" ValueChange="OnCountryValueChange"></DropDownListEvents>
                                                </SfDropDownList>
                                              
                                            </div>
                                            <div class="form-group mt-3">
                                                <label class="form-label">select city</label>
                                                @{
                                                    string city = City.Equals("") ? "Select City" : City;
                                                }

                                              @*  <label class="form-label">@(CityName == "" ? "Select City" : $"selected City :{CityName}")</label>*@
                                                <SfDropDownList TValue="string" TItem="City" Placeholder="@city" DataSource="Cities">
                                                    <DropDownListFieldSettings Value="id" Text="name"></DropDownListFieldSettings>
                                                    <DropDownListEvents TValue="string" TItem="City" ValueChange="OnCityValueChange"></DropDownListEvents>
                                                </SfDropDownList>
                                            </div>
                                            <div class="form-group mt-3">
                                                <label class="form-label">select town</label>
                                                @{
                                                    string town = Town.Equals("") ? "Select Town" : Town;
                                                }

                                                <SfDropDownList TValue="string" TItem="Town" Placeholder="@town" DataSource="Towns">
                                                    <DropDownListFieldSettings Value="id" Text="name"></DropDownListFieldSettings>
                                                    <DropDownListEvents TValue="string" TItem="Town" ValueChange="OnTownValueChange"></DropDownListEvents>
                                                </SfDropDownList>
                                                <ValidationMessage For="()=>EmployeeGroup2.TownId" class="text-danger" />
                                            </div>
                                            <div class="form-group mt-4">
                                                <label class="form-label">Other</label>
                                                <textarea @bind ="EmployeeGroup2.Other" placeholder="Optional" class="form-control"/>
                                            </div>
                                            <div class="form-group mt-5">
                                                <button class="btn btn-success float-end " type="submit">
                                                    <i class="bi bi-save"></i>
                                                    save
                                                </button>
                                            </div>
                                            @*<div class="form-group mt-5">
                                                <button class="btn btn-primary float-end mt-4 nb-5" type="submit">
                                                    <i class="bi bi-arrow-right"></i>
                                                    Next

                                                </button>
                                            </div>*@
                                        </div>
                                    </div>
                                   @* <div class="col-lg-2"></div>*@
                                </div>
                               
                            </EditForm>
                        }
                    </div>
               </div>
            </div>
        </div>
    }
}
<style>
    .floatingDiv{
        width:500px;
        background:#2280da;
        height:10px
    }
    .floatingNumber{
        border-radius:50%;
        color:white;
        background:#1d1858;
        width:20px;
        height:20px;
        align-content:center;
    }
    .inactive-div{
        width:500px;
        background:gray;
        height:10px;
    }
    .inactive-span{
        border-radius:50%;
        color:white;
        background:gray;
        width:20px;
        height:20px;
        align-content: center;
    }
    .format-border{
        border-radius:20px;
    }
    </style>
@code{
    [Parameter] public Employee Employee { get; set; } = new();
    [Parameter] public bool ShowAddOrUpdateEmployee { get; set; }
    [Parameter] public EmployeeGroup1 EmployeeGroup1 { get; set; }=new();
    [Parameter] public EmployeeGroup2 EmployeeGroup2 { get; set; } = new();

    [Parameter] public List<Country> Countries { get; set; } = new();
    [Parameter] public List<City> Cities { get; set; } = new();
    [Parameter] public List<Town> Towns { get; set; } = new();

    [Parameter] public List<GeneralDepartment> GeneralDepartments { get; set; } = new();
    [Parameter] public List<Department> Departments { get; set; } = new();
    [Parameter] public List<Branch> Branches { get; set; } = new();


    string FloatingNumber1="floatingNumber";
    string Floatingdiv1="floatingDiv";

    string FloatingNumber2 = "inactive-span";
    string Floatingdiv2 = "inactive-div";

    public bool FirstLayer {get; set; } = true;
    public bool SecondLayer {get; set;} = false;

    public string Title { get; set; } = "Add";
    public string GeneralDepartment {get;set;} = "";
    public string Department { get; set; } = "";
    public string Branch { get; set; } = "";
    public string Country { get; set; } = "";
    public string City { get; set; } = "";
    public string Town { get; set; } = "";


    private void ShowLayer2()
    {
        FirstLayer=false;
        SecondLayer = true;
    }
    void PrevClicked()
    {
        FirstLayer=true;
        SecondLayer = false;
    }
    protected override void OnInitialized() => allState.Action += StateHasChanged;
    [Parameter] public EventCallback NotifyParentFormCloseClicked{ get; set; }
    async Task Closeform()
    {
        ShowAddOrUpdateEmployee = false;
        // ShowMainPage = true;
        await NotifyParentFormCloseClicked.InvokeAsync();
    }
    //COuntry // city // Town
    [Parameter] public EventCallback<int> HandleCountrySelectEvent {get;set;}
    public void OnCountryValueChange(ChangeEventArgs<string,Country> args)
    {
        HandleCountrySelectEvent.InvokeAsync(int.Parse(args.Value));
    }

    [Parameter] public EventCallback<int> HandleCitySelectEvent { get; set; }
    public void OnCityValueChange(ChangeEventArgs<string, City> args)
    {
        HandleCitySelectEvent.InvokeAsync(int.Parse(args.Value));
    }

    public void OnTownValueChange(ChangeEventArgs<string, Town> args)
    {
        EmployeeGroup2.TownId = int.Parse(args.Value);
    }

    // Gd // Department // Branch
    [Parameter] public EventCallback<int> HandleGeneralDepartmentSelectEvent { get; set; }
    public void OnGeneralDepartmentValueChange(ChangeEventArgs<string, GeneralDepartment> args)
    {
        HandleGeneralDepartmentSelectEvent.InvokeAsync(int.Parse(args.Value));
    }

    [Parameter] public EventCallback<int> HandleDepartmentSelectEvent { get; set; }
    public void OnDepartmentValueChange(ChangeEventArgs<string, Department> args)
    {
        HandleDepartmentSelectEvent.InvokeAsync(int.Parse(args.Value));
    }

    public void OnBranchValueChange(ChangeEventArgs<string, Branch> args)
    {
        EmployeeGroup2.BranchId = int.Parse(args.Value);
    }
    //Forms VAlidations

    //file upload
    string ImageUploadMessage = "";
    private async Task UploadImage(InputFileChangeEventArgs e)
    {
        var file = e.File;

        // Validate the file type by checking ContentType
        if (file.ContentType == "image/png")
        {
            try
            {
                // Resize the image to 100x100
                var format = "image/png";
                var resizedImage = await file.RequestImageFileAsync(format, 100, 100);

                // Create a buffer and populate it with data from the resized image
                using var memoryStream = new MemoryStream();
                await resizedImage.OpenReadStream().CopyToAsync(memoryStream);
                var buffer = memoryStream.ToArray();

                // Convert to Base64 and construct the data URI
                var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
                EmployeeGroup1.Photo = imageData;

                // Clear error messages
                ImageUploadMessage = "";
            }
            catch (Exception ex)
            {
                // Handle any exceptions that may occur during file processing
                ImageUploadMessage = $"Error processing file: {ex.Message}";
            }
        }
        else
        {
            // Handle invalid file type
            ImageUploadMessage = "PNG file is required.";
        }
        
    }
    // Form1
    private bool ValidateEmployeeGroup1()
    {
        if (string.IsNullOrEmpty(EmployeeGroup1.Name) || string.IsNullOrEmpty(EmployeeGroup1.TelephoneNumber) || string.IsNullOrEmpty(EmployeeGroup1.FileNumber) || string.IsNullOrEmpty(EmployeeGroup1.Address) || string.IsNullOrEmpty(EmployeeGroup1.Photo) || string.IsNullOrEmpty(EmployeeGroup1.CivilId))
            return false;
        else
            return true;

    }
    //FOrm 
    //Form 2
    private bool ValidateEmployeeGroup2()
    {
        if(string.IsNullOrEmpty(EmployeeGroup2.JobName)||EmployeeGroup2.TownId==0||EmployeeGroup2.BranchId==0)
            return false;
        else
            return true;
    }
    //Save Form
    [Parameter] public EventCallback<Employee> HandleSaveEmployeeClickedEvent { get; set; }
    private void Form1()
    {
        var isvalid = ValidateEmployeeGroup1();
        if (isvalid)
        {
            Employee.name = EmployeeGroup1.Name;
            Employee.TelephoneNumber = EmployeeGroup1.TelephoneNumber;
            Employee.Address = EmployeeGroup1.Address;
            Employee.CivilId = EmployeeGroup1.CivilId;
            Employee.FileNumber = EmployeeGroup1.FileNumber;
            Employee.Photo = EmployeeGroup1.Photo;
            ShowLayer2();
        }
    }
    private  async Task Form2()
    {
        var isValid = ValidateEmployeeGroup2();
        if(isValid)
        {
            Employee.JobName = EmployeeGroup2.JobName;
            Employee.Other = EmployeeGroup2.Other;
            Employee.BranchId = EmployeeGroup2.BranchId;
            Employee.TownId = EmployeeGroup2.TownId;

            await HandleSaveEmployeeClickedEvent.InvokeAsync(Employee);

        }

    }
    public void ClearContent()
    {
        Employee = new();
        EmployeeGroup1 = new();
        EmployeeGroup2 = new();
        StateHasChanged();
    }
    public void Dispose() => allState.Action -= StateHasChanged;
    

}