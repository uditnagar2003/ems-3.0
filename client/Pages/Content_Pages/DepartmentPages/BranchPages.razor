
    @using client.ApplicationStates
    @*using BaseLibrary.Entities
@using client.ApplicationStates*@
    @implements IDisposable
@*inject DepartmentState departmentState*@
    @if (allState.ShowBranch)
{
    <div class="container mt-5">
        <div class="row">
            <div class="col-lg-12">
                <div class="card">
                    <div class="card-header">
                        <h4 class="float-start">Branch</h4>
                        <button class="btn btn-outline-success float-end" @onclick="AddButtonClicked">
                            <i class="bi bi-plus-circle-dotted"></i>
                            Add Branch
                        </button>
                    </div>
                    <div class="card-header" style="max-height:500px; overflow:hidden; overflow-y:scroll;">
                        <div class="card-body">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th scope="col">#</th>
                                        <th scope="col">Id</th>
                                        <th scope="col">Department</th>
                                        <th scope="col">Branch</th>
                                        <th scope="col">Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if(Branches is not null)
                                                            {
                                                            int count = 1;
                                                            foreach(var item in Branches)
                                                            {
                                    <tr>
                                        <th scope="row">@count</th>
                                        <td>@item.id</td>
                                        <td>@item.Department!.name</td>
                                        <td>@item.name</td>
                                        <td>
                                            <i class="bi bi-pencil text-info" id="cursorStyle"
                                               @onclick="()=>EditClicked(item)"></i>
                                            <i class="bi bi-trash text-danger" id="cursorStyle"
                                               @onclick="()=>DeleteClicked(item)"></i>

                                        </td>
                                    </tr>
                                    count++;
                                    }
                                                            }
                                                            else
                                                            {
                                    <tr>
                                        <td colspan="4"><div class="alert alert-info text-center">No Branch Added Yet!</div></td>
                                    </tr>
                                                            }

                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <BranchDialog @ref="branchDialog"
                      HandleSaveOperationEvents="HandleSaveOperationEvent"
                      Branch="Branch"
                      Departments="Departments" />



    <style>
        .cursorStyle {
            cursor: pointer;
        }
    </style>
}
@code
{
    BranchDialog? branchDialog;
    Branch Branch = new();
    public string Title { get; set; } = "Add";
    public List<Branch> Branches { get; set; } = new();

    public List<Department> Departments { get; set; } = new();
    protected override async Task OnInitializedAsync()
    {
        await GetDepartments();
        await GetBranches();
        allState.Action += StateHasChanged;
    }
    private async Task GetDepartments()
    {
        Departments = await departmentService.GetAll(Constants1.DepartmentBaseUrl);
    }
    private async Task GetBranches()
    {
        Branches = await branchService.GetAll(Constants1.BranchBaseUrl);
    }
    void OpenDialog()
    {
        branchDialog?.OpenDialog();
    }
    async Task AddButtonClicked()
    {
        branchDialog?.ChangeTitle("Add");
        Branch = new();
        await GetDepartments();
        OpenDialog();
    }
    private async Task HandleSaveOperationEvent()
    {
        bool successCheck = false;
        if (Branch.id > 0)
        {
            var result = await branchService.Update(Branch, Constants1.BranchBaseUrl);
            successCheck = await DisplayMessage(result.Flag, result.Message);
        }
        else
        {
            var response = await branchService.Insert(Branch, Constants1.BranchBaseUrl);
            successCheck = await DisplayMessage(response.Flag, response.Message);
        }
        if (successCheck)
        {
            Branch = new();
            await GetBranches();
            branchDialog?.ChangeTitle("Add");
        }

    }
    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            await dialogService.AlertAsync(message, "Success Operation");
            return true;
        }
        else
        {
            await dialogService.AlertAsync(message, "Alert some error");
            return false;


        }
    }
    private async Task EditClicked(Branch dep)
    {
        branchDialog?.ChangeTitle("Update");
        Branch = dep;
        await GetDepartments();
        OpenDialog();
    }
    private async void DeleteClicked(Branch dep)
    {
        bool confirm = await dialogService.ConfirmAsync($"Do you want to delete {dep.name}", "Confirm Delete");
        if (!confirm) return;
        var response = await branchService.DeleteById(dep.id, Constants1.BranchBaseUrl);
        var result = await DisplayMessage(response.Flag, response.Message);
        if (response.Flag)
        {
            await GetBranches();
            StateHasChanged();

        }


    }
    public void Dispose()
    {
        allState.Action -= StateHasChanged;
    }
}

