@using client.ApplicationStates
@*using BaseLibrary.Entities
@using client.ApplicationStates*@
@implements IDisposable
@*inject DepartmentState departmentState*@
@if (allState.ShowDepartment)
{
    <div class="container mt-5">
        <div class="row">
            <div class="col-lg-12">
                <div class="card">
                    <div class="card-header">
                        <h4 class="float-start">Departments</h4>
                        <button class="btn btn-outline-success float-end" @onclick="AddButtonClicked">
                            <i class="bi bi-plus-circle-dotted"></i>
                         Add Department
                        </button>
                    </div>
                    <div class="card-header" style ="max-height:500px; overflow:hidden; overflow-y:scroll;">
                        <div class="card-body">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th scope="col">#</th>
                                        <th scope="col">Id</th>
                                        <th scope="col">General Department</th>
                                        <th scope="col">Department</th>
                                        <th scope="col">Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if(Departments is not null)
                                    {
                                        int count = 1;
                                        foreach(var item in Departments)
                                        {
                                        <tr>
                                            <th scope="row">@count</th>
                                            <td>@item.id</td>
                                            <td>@item.GeneralDepartment!.name</td>
                                            <td>@item.name</td>
                                            <td>
                                                <i class="bi bi-pencil text-info" id="cursorStyle"
                                                @onclick="()=>EditClicked(item)"></i>
                                                    <i class="bi bi-trash text-danger" id="cursorStyle"
                                                       @onclick="()=>DeleteClicked(item)"></i>

                                            </td>
                                            </tr>
                                            count++;
                                        }
                                    }
                                    else
                                    {
                                        <tr>
                                            <td colspan="4"><div class="alert alert-info text-center">No  Department Added Yet!</div></td>
                                        </tr>
                                    }

                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <DepartmentDialog @ref="departmentDialog"
                      HandleSaveOperationEvents="HandleSaveOperationEvent"
                      Department1="Department"
                      GeneralDepartments="GeneralDepartments" />



<style>
    .cursorStyle {
        cursor: pointer;
    }
</style>


@code
    {
    DepartmentDialog? departmentDialog;
    Department Department = new();
    public string Title { get; set; } = "Add";
    public List<Department> Departments { get; set; } = new();

    public List<GeneralDepartment> GeneralDepartments { get; set; }=new();
    protected override async Task OnInitializedAsync()
    {
        await GetGeneralDepartments();
        await GetDepartments();
        allState.Action += StateHasChanged;
    }
    private async Task GetDepartments()
    {
        Departments = await departmentService.GetAll(Constants1.DepartmentBaseUrl);
    }
    private async Task GetGeneralDepartments()
    {
        GeneralDepartments = await generalDepartmentService.GetAll(Constants1.GeneralDepartmentBaseUrl);
    }
    void OpenDialog()
    {
        departmentDialog?.OpenDialog();
    }
    async Task AddButtonClicked()
    {
        departmentDialog?.ChangeTitle("Add");
        Department = new();
        await GetGeneralDepartments();
        OpenDialog();
    }
    private async Task HandleSaveOperationEvent()
    {
        bool successCheck = false;
        if(Department.id>0)
        {
            var result = await departmentService.Update(Department, Constants1.DepartmentBaseUrl);
            successCheck = await DisplayMessage(result.Flag, result.Message);
        }
        else
        {
            var response = await departmentService.Insert(Department, Constants1.DepartmentBaseUrl);
            successCheck = await DisplayMessage(response.Flag, response.Message);
        }
        if(successCheck)
        {
            Department = new();
            await GetDepartments();
            departmentDialog?.ChangeTitle("Add");
        }

    }
    private async Task<bool> DisplayMessage(bool flag,string message)
    {
        if(flag)
        {
            await dialogService.AlertAsync(message, "Success Operation");
            return true;
        }
        else
        {
            await dialogService.AlertAsync(message, "Alert");
            return false;


        }
    }
    private  async Task EditClicked(Department dep)
    {
        departmentDialog?.ChangeTitle("Update");
        Department = dep;
       await  GetGeneralDepartments();
        OpenDialog();
    }
    private async void DeleteClicked(Department dep)
    {
        bool confirm = await dialogService.ConfirmAsync($"Do you want to delete {dep.name}", "Confirm Delete");
        if (!confirm) return;
        var response = await departmentService.DeleteById(dep.id, Constants1.DepartmentBaseUrl);
        var result = await DisplayMessage(response.Flag, response.Message);
        if (response.Flag)
        {
            await GetDepartments();
            StateHasChanged();

        }


    }
    public void Dispose()
    {
        allState.Action -= StateHasChanged;
    }

}
}