@using client.ApplicationStates
@*using BaseLibrary.Entities
@using client.ApplicationStates*@
@implements IDisposable
@*inject DepartmentState departmentState*@
@if (allState.ShowCountry)
{
    <div class="container mt-5">
        <div class="row">
            <div class="col-lg-12">
                <div class="card">
                    <div class="card-header">
                        <h4 class="float-start">Country</h4>
                        <button class="btn btn-outline-success float-end" @onclick="OpenDialog">
                            <i class="bi bi-plus-circle"></i>
                            Add Country
                        </button>
                    </div>
                    <div class="card-header" style="max-height:500px; overflow:hidden; overflow-y:scroll;">
                        <div class="card-body">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th scope="col">#</th>
                                        <th scope="col">Id</th>
                                        <th scope="col">Country</th>
                                        <th scope="col">Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (Countries is not null)
                                    {
                                        int count = 1;
                                        foreach (var item in Countries)
                                        {
                                            <tr>
                                                <th scope="row">@count</th>
                                                <td>@item.id</td>
                                                <td>@item.name</td>
                                                <td>
                                                    <i class="bi bi-pencil text-info" id="cursorStyle"
                                                       @onclick="()=>EditClicked(item)"></i>
                                                    <i class="bi bi-trash text-danger" id="cursorStyle"
                                                       @onclick="()=>DeleteClicked(item)"></i>

                                                </td>
                                            </tr>
                                            count++;
                                        }
                                    }
                                    else
                                    {
                                        <tr>
                                            <td colspan="4"><div class="alert alert-info text-center">No Country </div></td>
                                            <td colspan="4"><div class="alert alert-info text-center">No Country Added Yet!</div></td>
                                        </tr>
                                    }

                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
<CountryDialog @ref="countryDialog"
                         HandleSaveOperationEvent="HandleSaveOperationEvent"
                         Country="Country" />

<style>
    .cursorStyle{
        cursor: pointer;
    }
</style>
@code
{
    CountryDialog? countryDialog;
    Country Country = new();
    public string Title { get; set; } = "Add";
    public List<Country> Countries { get; set; } = new();
    protected override async Task OnInitializedAsync()
    {
        await GetCountries();
        allState.Action += StateHasChanged;
    }
    private async Task GetCountries()
    {
        Countries = await countryService.GetAll(Constants1.CountryBaseUrl);
    }
    void OpenDialog()
    {
        countryDialog?.OpenDialog();
    }
    private async Task HandleSaveOperationEvent(Country country)
    {
        bool successCheck = false;
        if (country.id > 0)
        {
            var result = await countryService.Update(country, Constants1.CountryBaseUrl);
            successCheck = await DisplayMessage(result.Flag, result.Message);
        }
        else
        {
            var response = await countryService.Insert(country, Constants1.CountryBaseUrl);
            successCheck = await DisplayMessage(response.Flag, response.Message);
        }
        if (successCheck)
        {
            Country = new();
            await GetCountries();
            countryDialog?.ChangeTitle("Add");
        }

    }
    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            await dialogService.AlertAsync(message, "Success Operation");
            return true;
        }
        else
        {
            await dialogService.AlertAsync(message, "Alert");
            return false;


        }
    }
    private void EditClicked(Country gdep)
    {
        countryDialog?.ChangeTitle("Update");
        Country = gdep;
        OpenDialog();
    }
    private async void DeleteClicked(Country gdep)
    {
        bool confirm = await dialogService.ConfirmAsync($"Do you want to delete {gdep.name}", "Confirm Delete");
        if (!confirm) return;
        var response = await countryService.DeleteById(gdep.id, Constants1.CountryBaseUrl);
        if (await DisplayMessage(response.Flag, response.Message))
        {
            await GetCountries();
            StateHasChanged();
        }
    }
    public void Dispose()
    {
        allState.Action -= StateHasChanged;
    }

}
