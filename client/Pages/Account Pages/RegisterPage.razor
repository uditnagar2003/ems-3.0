@page "/identity/account/register"
@using Syncfusion.Blazor.Popups
@layout AuthenticationLayout
@inject SfDialogService DialogService
<div class="container">
    <div class="row">
        <div class="col-lg-4"></div>
        <div class="col-lg-4">
            <EditForm Enhance Model="User" OnValidSubmit="HandleRegistration">
                <DataAnnotationsValidator/>
                 <div class="card bg-dark" style="opacity:0.8; margin-top:25%; border-radius:10px; color:white;font-weight:bold">
                    <div class="card-header text-center fs-5 mb-2">Register User</div>
                    <div class="container">
                        <div class="row">
                            <div class="col-lg-4 col-md-4 col-sm-4"></div>
                            <div class="col-lg-4 col-md-4 col-sm-4 d-flex justify-content-center">
                                <img style="border-radius:20px" src="/images/logo/logo.png" height="50" width="50" />
                            </div>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="form-group mt-3">
                            <label class="form-label">Full Name</label>
                            <InputText @bind-Value="User.FullName" class="form-control"></InputText>
                        </div>
                        <div class="form-group mt-3">
                            <label class="form-label">Email</label>
                            <InputText @bind-Value="User.EmailAddress" class="form-control"></InputText>
                        </div>
                        <div class="form-group mt-3">
                            <label class="form-label">Confirm Password</label>
                            <input type="password" @bind="User.Password" class="form-control"/>
                        </div>
                        <div class="form-group mt-3">
                            <label class="form-label">Password</label>
                            <input type="password" @bind="User.ConfirmPassword" class="form-control"/>
                        </div>
                        <div class="form-group mt-3">
                            @if (ShowLoadingButton)
                            {

                                <button class=" btn btn-primary float-end" type="button" disabled>
                                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                    Processing...
                                </button>
                            }
                            else
                            {
                                <button class="btn btn-outline-primary float-end" type="submit">Register</button>
                            }
                        </div>
                          <div class="card-footer">
                        <span class="text-center">
                            Already Have an Account
                            <a class="btn-link" href="identity/account/login">LogIN</a>
                        </span>
                        <ValidationSummary/>
                    </div>
                    </div>
                </div>
            </EditForm>
        </div>
        <div class="col-lg-4"></div>
    </div>
</div>
@code
{
    public bool ShowLoadingButton { get; set;  } = false;
    Register User = new();
    [CascadingParameter] public Task<AuthenticationState> AuthenticationState { get; set; }
    protected async override Task OnInitializedAsync()
    {
        await UserAuthentication();
    }
    
    async Task HandleRegistration()
    {
        ShowLoadingButton = true;
        var result = await accountService.CreateAsync(User);
        if (result.Flag)
        {
              await DisplayDialog(result.Message, "Success");
            NavManager.NavigateTo("/identity/account/login", forceLoad: true);
        }
        else
        {
            await DisplayDialog(result.Message, "Alert");
        }

        ShowLoadingButton = false;

    }
    private async Task DisplayDialog(string content, string title )
    {
        await DialogService.AlertAsync(content, title);
    }
    private async Task UserAuthentication()
    {
        var user = (await AuthenticationState).User;
        if (user.Identity!.IsAuthenticated)
            NavManager.NavigateTo("/identity/account/login");
    }
   
}